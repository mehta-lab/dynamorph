

preprocess:
  image_dirs: [
    '<path to folder containing first experiment to batch>',
    '<path to folder containing second experiment to batch>'
  ]
  target_dirs: [
    '<path to OUTPUT folder for first experiment>',
    '<path to OUTPUT folder for second experiment>'
  ]

  channels: ["Retardance", "Phase2D", "Brightfield"]
  # list of channels to include.  Resulting array is (phase, retardance, brightfield) = (0, 1, 2) index

  fov: ['C5-Site_0','C5-Site_1']
  # list of subfolder or position indices that identifies a field-of-view
  # ex: 'all' to preprocess all positions
  # ex: ['C5-Site_0', 'C5-Site_1', 'C5-Site_2']
  # ex: [1, 3, 10, 100]

  multipage: False
  # if images are multipage-tiffs

  z_slice: 2
  # single integer to select the in-focus z-plane.
  # "z###" must exist in file names
  # only required for multipage-tiff stacks

  pos_dir: True
  # whether each position is in a subdirectory (True), or in the same directory (False)


segmentation_inference:
  raw_dirs: [
    '<path to folder containing first experiment "RAW" data>',
    '<path to folder containing second experiment "RAW" data>'
  ]
  supp_dirs: [
    '<path to folder containing first experiment "SUPP" data>',
    '<path to folder containing second experiment "SUPP" data>'
  ]
  validation_dirs: [
    '<path to folder containing first experiment "Validation" data>',
    '<path to folder containing second experiment "Validation" data>'
  ]

  model: 'UNet'
  # only UNet was implemented for the dynamorph paper

  weights: '<full path to weights filename as .h5 file>'

  gpu_ids: [1,2,3]
  # list of GPUs to distribute inference across

  fov: ['C4-Site_0', 'C4-Site_1', 'C4-Site_2']
  # well positions (<fov>.npy is the output of "preprocess" above)

  channels: [0,1]
  num_classes: 3
  window_size: 256
  batch_size: 8
  num_pred_rnd: 5
  seg_val_cat: 'mg'


patch:
  raw_dirs: [
    '<path to folder containing first experiment "RAW" data>',
    '<path to folder containing second experiment "RAW" data>'
  ]
  supp_dirs: [
    '<path to folder containing first experiment "SUPP" data>',
    '<path to folder containing second experiment "SUPP" data>'
  ]

  channels: [0,1]
  fov: ['C5-Site_0','C5-Site_1']
  num_cpus: 4
  window_size: 256
  save_fig: False
  reload: False # ??? not functional?
  skip_boundary: False
  # True to skip patches whose edges exceed the image boundaries
  # False to pad patches with mean background values

  # instance segmentation parameters
  count_threshold_low: 500
  count_threshold_high: 12000
  foreground_threshold: 0.3
  dbscan_eps: 10
  dbscan_min_samples: 250



latent_encoding:
  raw_dirs: [
    '<path to folder containing first experiment "RAW" data>',
    '<path to folder containing second experiment "RAW" data>'
  ]
  supp_dirs: [
    '<path to folder containing first experiment "SUPP" data>',
    '<path to folder containing second experiment "SUPP" data>'
  ]

  weights: ['<path to pytorch weight file that will be used across all experiments>']
  # pytorch weight file

  save_output: True
  # write .jpg results from run_vae.process

  gpu_ids: [0,1,2]
  # list of GPU ids to run inference across.

  fov: ['C5-Site_0','C5-Site_1']
  patch_type: "masked_mat"

  channels: [0,1]
  channel_mean: [0.4, 0]
  channel_std: [0.05, 0.05]
  # for each channel in channels, hardcode a mean and std for zscoring

  network: 'VQ_VAE_z16'
  # VQ_VAE_z16 or UNet
  num_hiddens: 16
  num_residual_hiddens: 32
  num_embeddings: 64
  commitment_cost: 0.25


dim_reduction:
  input_dirs: [
    '<path to folder containing first experiment LATENT SPACE.pkl files>',
    '<path to folder containing second experiment LATENT SPACE.pkl files>'
  ]
  output_dirs: [
    '<path to folder containing first experiment PCA outputs>',
    '<path to folder containing second experiment PCA outputs>'
  ]
  # PCA transform outputs are written to output dirs

  weights_dirs: '<path to single folder where weights will be written or read',

  file_name_prefixes: ['C4', 'C5']
  fit_model: False
  conditions: ['<filename>']


training:
  raw_dirs: [
    '/CompMicro/projects/cardiomyocytes/200721_CM_Mock_SPS_Fluor/20200721_CM_Mock_SPS/dnm_input_tstack',
    '/CompMicro/projects/cardiomyocytes/20200722CM_LowMOI_SPS_Fluor/20200722 CM_LowMOI_SPS/dnm_input_tstack',
    ]
  supp_dirs: [
      '/CompMicro/projects/cardiomyocytes/200721_CM_Mock_SPS_Fluor/20200721_CM_Mock_SPS/dnm_supp_tstack',
      '/CompMicro/projects/cardiomyocytes/20200722CM_LowMOI_SPS_Fluor/20200722 CM_LowMOI_SPS/dnm_supp_tstack',
  ]

  weights_dirs: [
      '/CompMicro/projects/cardiomyocytes/200721_CM_Mock_SPS_Fluor/20200721_CM_Mock_SPS/dnm_train_tstack',
      '/CompMicro/projects/cardiomyocytes/20200722CM_LowMOI_SPS_Fluor/20200722 CM_LowMOI_SPS/dnm_train_tstack',
  ]

  # model hyperparameters
  network: 'VQ_VAE_z32'
  num_inputs: 2
  num_hiddens: 64
  num_residual_hiddens: 64
  num_residual_layers: 2
  num_embeddings: 512
  commitment_cost: 0.25
  weight_matching: 100
  margin: 1
  w_a: 1
  w_t: 0.5
  w_n: -0.5

  # normalization
  channel_mean: null
  channel_std: null

   ### microglia data####
#  channel_mean: [0.4, 0, 0.5]
#  channel_std: [0.05, 0.05, 0.05]

  # training parameters

  n_epochs: 5000
  learn_rate: 0.0001
  batch_size: 768
  val_split_ratio: 0.15
  shuffle_data: False
  transform: True
  patience: 100
  n_pos_samples: 4
  gpu_id: 1
  start_model_path: null
  retrain: False
  start_epoch: 0
  earlystop_metric: 'positive_triplet'
  model_name: 'CM+kidney+A549_vqvae32_test'
  use_mask: False


  

